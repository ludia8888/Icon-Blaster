version: '3.8'

services:
  # NGINX Gateway
  nginx-gateway:
    build: ./nginx
    container_name: nginx-gateway
    ports:
      - "8090:80"
    depends_on:
      - oms-monolith
      - user-service
    networks:
      - oms-network
    restart: unless-stopped

  # User Service
  user-service:
    build: ./user-service
    container_name: user-service
    environment:
      - DATABASE_URL=postgresql+asyncpg://user_service:password@user-db:5432/user_service
      - REDIS_URL=redis://user-redis:6379
      - JWT_SECRET=${JWT_SECRET:-shared-secret-key-for-testing}
      - JWT_ALGORITHM=HS256
      - JWT_ISSUER=user-service
      - JWT_AUDIENCE=oms
      - ACCESS_TOKEN_EXPIRE_MINUTES=30
      - REFRESH_TOKEN_EXPIRE_DAYS=7
    depends_on:
      - user-db
      - user-redis
    networks:
      - oms-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # User Service Database
  user-db:
    image: postgres:15-alpine
    container_name: user-db
    environment:
      - POSTGRES_DB=user_service
      - POSTGRES_USER=user_service
      - POSTGRES_PASSWORD=password
    volumes:
      - user-db-data:/var/lib/postgresql/data
    networks:
      - oms-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user_service"]
      interval: 10s
      timeout: 5s
      retries: 5

  # User Service Redis
  user-redis:
    image: redis:7-alpine
    container_name: user-redis
    networks:
      - oms-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # OMS Monolith (Updated Configuration)
  oms-monolith:
    build: ./oms-monolith
    container_name: oms-monolith
    environment:
      # Database Configuration
      - DATABASE_URL=postgresql://oms_user:oms_password@oms-db:5432/oms_db
      - REDIS_URL=redis://oms-redis:6379
      - TERMINUSDB_URL=http://terminusdb:6363
      - TERMINUSDB_USER=admin
      - TERMINUSDB_PASSWORD=admin
      - TERMINUSDB_DB=oms
      
      # Authentication Configuration
      - USE_IAM_VALIDATION=true
      - IAM_SERVICE_URL=http://user-service:8000
      - JWT_SECRET=${JWT_SECRET:-shared-secret-key-for-testing}
      - JWT_ALGORITHM=HS256
      - JWT_ISSUER=user-service
      - JWT_AUDIENCE=oms
      - IAM_VERIFY_SSL=false
      
      # Application Configuration
      - ENVIRONMENT=development
      - DEBUG=false
      - LOG_LEVEL=INFO
      
      # Security Configuration
      - CORS_ORIGINS=http://localhost:8090,http://localhost:3000
      - TRUSTED_HOSTS=localhost,nginx-gateway
      
      # OpenTelemetry Configuration
      - JAEGER_ENABLED=true
      - JAEGER_AGENT_HOST=jaeger
      - JAEGER_AGENT_PORT=6831
      - OTEL_SERVICE_NAME=oms-monolith
      - OTEL_PYTHON_EXCLUDED_URLS=/health,/metrics,/api/v1/health
      - SERVICE_VERSION=1.0.0
      
    depends_on:
      - oms-db
      - oms-redis
      - user-service
      - terminusdb
    networks:
      - oms-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # OMS Database
  oms-db:
    image: postgres:15-alpine
    container_name: oms-db
    environment:
      - POSTGRES_DB=oms_db
      - POSTGRES_USER=oms_user
      - POSTGRES_PASSWORD=oms_password
    volumes:
      - oms-db-data:/var/lib/postgresql/data
    networks:
      - oms-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U oms_user"]
      interval: 10s
      timeout: 5s
      retries: 5

  # OMS Redis
  oms-redis:
    image: redis:7-alpine
    container_name: oms-redis
    networks:
      - oms-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Tracing: Jaeger
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: jaeger
    ports:
      - "5775:5775/udp"  # Zipkin/Thrift compact
      - "6831:6831/udp"  # Thrift compact
      - "6832:6832/udp"  # Thrift binary
      - "5778:5778"      # Serve configs
      - "16686:16686"    # Web UI
      - "14268:14268"    # HTTP collector
      - "14250:14250"    # gRPC collector
    environment:
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
    networks:
      - oms-network
    restart: unless-stopped

  # Monitoring: Prometheus (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - oms-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Monitoring: Grafana (Optional)
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-data:/var/lib/grafana
    networks:
      - oms-network
    restart: unless-stopped
    profiles:
      - monitoring

  # TerminusDB
  terminusdb:
    image: terminusdb/terminusdb-server:latest
    container_name: terminusdb
    environment:
      - TERMINUSDB_SERVER_NAME=oms-terminusdb
      - TERMINUSDB_ADMIN_PASS=admin
      - TERMINUSDB_SERVER_PORT=6363
      - TERMINUSDB_AUTOLOGIN=true
    ports:
      - "6363:6363"
    volumes:
      - terminusdb-data:/app/storage
    networks:
      - oms-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6363/api/status"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s

networks:
  oms-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16

volumes:
  user-db-data:
  oms-db-data:
  grafana-data:
  terminusdb-data: