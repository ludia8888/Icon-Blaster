{
  "permissions": {
    "allow": [
      "Bash(ls:*)",
      "Bash(grep:*)",
      "Bash(mkdir:*)",
      "Bash(mv:*)",
      "Bash(find:*)",
      "Bash(rg:*)",
      "Bash(cp:*)",
      "Bash(rm:*)",
      "Bash(diff:*)",
      "Bash(git add:*)",
      "Bash(git commit:*)",
      "Bash(python -m pytest tests/test_audit_publisher_integration.py -v)",
      "Bash(pip install:*)",
      "Bash(python:*)",
      "Bash(source:*)",
      "Bash(docker-compose up:*)",
      "Bash(docker compose:*)",
      "Bash(curl:*)",
      "Bash(cat:*)",
      "Bash(export DOCKER_HOST=\"unix://$HOME/.colima/default/docker.sock\")",
      "Bash(docker logs:*)",
      "Bash(docker stop:*)",
      "Bash(colima start:*)",
      "Bash(export DOCKER_HOST=unix:///Users/isihyeon/.colima/default/docker.sock)",
      "Bash(echo:*)",
      "Bash(docker-compose:*)",
      "Bash(colima status:*)",
      "Bash(git push:*)",
      "WebFetch(domain:terminusdb.com)",
      "Bash(chmod:*)",
      "Bash(./run_tests.sh)",
      "Bash(./run_tests_fixed.sh)",
      "Bash(./run_full_stack_test.sh:*)",
      "Bash(git reset:*)",
      "Bash(docker:*)",
      "Bash(brew services:*)",
      "Bash(./start_full_stack.sh:*)",
      "Bash(export COMPOSE_DOCKER_CLI_BUILD=0)",
      "Bash(export DOCKER_BUILDKIT=0)",
      "Bash(COMPOSE_DOCKER_CLI_BUILD=0 DOCKER_BUILDKIT=0 docker-compose build oms-monolith)",
      "Bash(COMPOSE_DOCKER_CLI_BUILD=0 DOCKER_BUILDKIT=0 docker-compose build oms-monolith --no-cache)",
      "Bash(./test_full_stack.sh:*)",
      "Bash(git clone:*)",
      "Bash(./integration-test.sh:*)",
      "Bash(pip freeze)",
      "Bash(./integration-test-full.sh:*)",
      "Bash(./performance-test.sh:*)",
      "Bash(./comprehensive-test.sh)",
      "Bash(pkill:*)",
      "Bash(true)",
      "Bash(bash:*)",
      "Bash(make:*)",
      "Bash(touch:*)",
      "Bash(touch:*)",
      "Bash(DEBUG=true python -m pytest tests/test_validators.py -v)",
      "Bash(DEBUG=true python -m pytest tests/test_validators.py tests/test_jwt.py --cov=src/core --cov-report=term-missing)",
      "Bash(alembic init:*)",
      "Bash(export:*)",
      "Bash(pytest:*)",
      "Bash(pip show:*)",
      "Bash(alembic revision:*)",
      "Bash(PYTHONPATH=. python:*)",
      "Bash(PYTHONPATH=./src python -c \"\nimport os\nos.environ.update({\n    ''DEBUG'': ''true'',\n    ''DATABASE_URL'': ''sqlite+aiosqlite:///./test.db'',\n    ''JWT_SECRET'': ''test-secret-key-for-testing-purposes-only-minimum-32-characters''\n})\nfrom core.database import engine\nprint(''Database engine created successfully'')\nprint(''Database URL:'', os.environ.get(''DATABASE_URL''))\n\")",
      "Bash(for:*)",
      "Bash(do)",
      "Bash(sed:*)",
      "Bash(done)",
      "Bash(DEBUG=true PASSWORD_COMMON_PATTERNS_LIST=\"password,123456,qwerty,abc123\" python -c \"\nimport sys\nsys.path.append(''src'')\nfrom core.validators import validate_password\n\npasswords = [''Password1!'', ''Qwerty12!'', ''Abc123!A'', ''Password!1'', ''123456A!'']\n\nfor password in passwords:\n    try:\n        result = validate_password(password)\n        print(f''Password \"\"{password}\"\" did not raise error, validation passed'')\n    except ValueError as e:\n        print(f''Password \"\"{password}\"\" correctly raised: {e}'')\n\")",
      "Bash(DEBUG=true PASSWORD_COMMON_PATTERNS_LIST=\"password,123456,qwerty,abc123\" python -c \"\nimport sys\nsys.path.append(''src'')\n\n# Test specific password\npassword_lower = ''password1''\npattern = ''password''\n\nprint(f''Password: {password_lower}'')\nprint(f''Pattern: {pattern}'')\nprint(f''Length check: {len(password_lower)} <= {len(pattern)} + 2 = {len(password_lower) <= len(pattern) + 2}'')\n\nmatch_condition = (password_lower == pattern or \n                  (len(pattern) >= 4 and \n                   password_lower.startswith(pattern) and \n                   len(password_lower) <= len(pattern) + 2))\nprint(f''Overall match: {match_condition}'')\n\")",
      "Bash(poetry run pytest:*)",
      "Bash(createdb:*)",
      "Bash(cloc:*)",
      "Bash(timeout:*)",
      "Bash(env)"
    ],
    "deny": []
  }
}