version: '3.8'

services:
  # Embedding Microservice
  embedding-service:
    build:
      context: .
      dockerfile: services/embedding-service/Dockerfile
    container_name: oms-embedding-service
    environment:
      - SERVICE_NAME=embedding-service
      - ENV=${ENV:-development}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - REDIS_URL=redis://redis:6379/5
      - DATA_KERNEL_GRPC_ENDPOINT=data-kernel:50051
      - USE_DATA_KERNEL_GATEWAY=true
      - DEFAULT_MODEL=sentence-transformers/all-MiniLM-L6-v2
      - GRPC_PORT=50055
      - EMBEDDING_SERVICE_PORT=8001
    ports:
      - "8001:8001"   # FastAPI
      - "50055:50055" # gRPC
    depends_on:
      - redis
      - data-kernel
    networks:
      - oms-network
    restart: unless-stopped
    volumes:
      - embedding-cache:/app/.cache/models
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Scheduler Microservice
  scheduler-service:
    build:
      context: .
      dockerfile: services/scheduler-service/Dockerfile
    container_name: oms-scheduler-service
    environment:
      - SERVICE_NAME=scheduler-service
      - ENV=${ENV:-development}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - REDIS_URL=redis://redis:6379/6
      - DATA_KERNEL_GRPC_ENDPOINT=data-kernel:50051
      - USE_DATA_KERNEL_GATEWAY=true
      - SCHEDULER_PORT=8002
      - GRPC_PORT=50056
    ports:
      - "8002:8002"   # FastAPI
      - "50056:50056" # gRPC
    depends_on:
      - redis
      - data-kernel
    networks:
      - oms-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Scheduler Worker (separate container for job execution)
  scheduler-worker:
    build:
      context: .
      dockerfile: services/scheduler-service/Dockerfile
    container_name: oms-scheduler-worker
    command: ["python", "-m", "app.worker", "run"]
    environment:
      - SERVICE_NAME=scheduler-worker
      - ENV=${ENV:-development}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - REDIS_URL=redis://redis:6379/6
      - DATA_KERNEL_GRPC_ENDPOINT=data-kernel:50051
      - USE_DATA_KERNEL_GATEWAY=true
      - WORKER_CONCURRENCY=4
    depends_on:
      - redis
      - data-kernel
      - scheduler-service
    networks:
      - oms-network
    restart: unless-stopped
    deploy:
      replicas: 2  # Can scale workers independently

  # Event Gateway Microservice
  event-gateway:
    build:
      context: .
      dockerfile: services/event-gateway/Dockerfile
    container_name: oms-event-gateway
    environment:
      - SERVICE_NAME=event-gateway
      - ENV=${ENV:-development}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - NATS_URL=nats://nats:4222
      - REDIS_URL=redis://redis:6379/7
      - EVENT_GATEWAY_PORT=8003
      - GRPC_PORT=50057
      - ENABLE_WEBHOOKS=${ENABLE_WEBHOOKS:-true}
      - WEBHOOK_TIMEOUT=5
    ports:
      - "8003:8003"   # FastAPI
      - "50057:50057" # gRPC
    depends_on:
      - nats
      - redis
    networks:
      - oms-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Update main OMS service to use microservices
  oms:
    environment:
      # Enable microservices
      - USE_EMBEDDING_MS=true
      - EMBEDDING_SERVICE_ENDPOINT=embedding-service:50055
      - USE_SCHEDULER_MS=true
      - SCHEDULER_SERVICE_ENDPOINT=scheduler-service:50056
      - USE_EVENT_GATEWAY=true
      - EVENT_GATEWAY_ENDPOINT=event-gateway:50057
    depends_on:
      - embedding-service
      - scheduler-service
      - event-gateway

volumes:
  embedding-cache:
    driver: local

networks:
  oms-network:
    external: true