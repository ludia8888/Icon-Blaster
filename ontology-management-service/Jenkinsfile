// Jenkins Pipeline for OMS
// Includes naming convention validation

pipeline {
    agent any
    
    options {
        buildDiscarder(logRotator(numToKeepStr: '10'))
        timeout(time: 30, unit: 'MINUTES')
        timestamps()
    }
    
    environment {
        PYTHON_VERSION = '3.11'
        VENV_DIR = "${WORKSPACE}/venv"
        PATH = "${VENV_DIR}/bin:${PATH}"
    }
    
    stages {
        stage('Setup') {
            steps {
                echo 'Setting up Python environment...'
                sh '''
                    python${PYTHON_VERSION} -m venv ${VENV_DIR}
                    . ${VENV_DIR}/bin/activate
                    pip install --upgrade pip
                    pip install -r requirements.txt
                '''
            }
        }
        
        stage('Naming Convention Validation') {
            steps {
                echo 'Validating naming conventions...'
                sh '''
                    . ${VENV_DIR}/bin/activate
                    
                    # Run validation on all files
                    python -m core.validation.ci_integration . \
                        --format junit \
                        --output naming-convention-report.xml \
                        --fail-on-error || true
                    
                    # Also generate text report for console
                    python -m core.validation.ci_integration . \
                        --format text \
                        --verbose
                    
                    # Generate JSON report for further processing
                    python -m core.validation.ci_integration . \
                        --format json \
                        --output naming-convention-report.json
                '''
            }
            post {
                always {
                    junit 'naming-convention-report.xml'
                    archiveArtifacts artifacts: 'naming-convention-report.*', fingerprint: true
                    
                    // Parse JSON report and create summary
                    script {
                        if (fileExists('naming-convention-report.json')) {
                            def report = readJSON file: 'naming-convention-report.json'
                            def summary = report.summary
                            
                            if (summary.invalid > 0) {
                                unstable("Found ${summary.invalid} naming convention violations")
                                
                                // Add badge to build
                                addBadge(
                                    icon: 'warning.gif',
                                    text: "Naming: ${summary.invalid} issues"
                                )
                            } else {
                                addBadge(
                                    icon: 'success.gif',
                                    text: 'Naming: OK'
                                )
                            }
                            
                            // Create summary for build description
                            currentBuild.description = "Naming: ${summary.valid}/${summary.total_entities} valid"
                        }
                    }
                }
            }
        }
        
        stage('Code Quality') {
            parallel {
                stage('Linting') {
                    steps {
                        echo 'Running linters...'
                        sh '''
                            . ${VENV_DIR}/bin/activate
                            pip install flake8 black isort
                            
                            # Check code formatting
                            black --check core/ || true
                            isort --check-only core/ || true
                            
                            # Run flake8
                            flake8 core/ \
                                --max-line-length=100 \
                                --ignore=E203,W503 \
                                --format=checkstyle \
                                --output-file=flake8-report.xml || true
                        '''
                    }
                    post {
                        always {
                            recordIssues(
                                enabledForFailure: true,
                                tools: [flake8(pattern: 'flake8-report.xml')]
                            )
                        }
                    }
                }
                
                stage('Type Checking') {
                    steps {
                        echo 'Running type checker...'
                        sh '''
                            . ${VENV_DIR}/bin/activate
                            pip install mypy types-all
                            
                            mypy core/ \
                                --ignore-missing-imports \
                                --junit-xml mypy-report.xml || true
                        '''
                    }
                    post {
                        always {
                            junit 'mypy-report.xml'
                        }
                    }
                }
                
                stage('Security Scan') {
                    steps {
                        echo 'Running security scans...'
                        sh '''
                            . ${VENV_DIR}/bin/activate
                            pip install bandit safety
                            
                            # Run bandit
                            bandit -r core/ \
                                -f json \
                                -o bandit-report.json || true
                            
                            # Check dependencies
                            safety check \
                                --json \
                                --output safety-report.json || true
                        '''
                    }
                    post {
                        always {
                            archiveArtifacts artifacts: '*-report.json', fingerprint: true
                            
                            // Publish security warnings
                            script {
                                if (fileExists('bandit-report.json')) {
                                    def bandit = readJSON file: 'bandit-report.json'
                                    if (bandit.results.size() > 0) {
                                        unstable("Found ${bandit.results.size()} security issues")
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        
        stage('Test') {
            steps {
                echo 'Running tests...'
                sh '''
                    . ${VENV_DIR}/bin/activate
                    pip install pytest pytest-cov pytest-html
                    
                    # Run tests with coverage
                    pytest core/validation/tests/ \
                        -v \
                        --cov=core/validation \
                        --cov-report=xml \
                        --cov-report=html \
                        --junitxml=test-results.xml \
                        --html=test-report.html \
                        --self-contained-html || true
                '''
            }
            post {
                always {
                    junit 'test-results.xml'
                    publishHTML([
                        allowMissing: false,
                        alwaysLinkToLastBuild: true,
                        keepAll: true,
                        reportDir: 'htmlcov',
                        reportFiles: 'index.html',
                        reportName: 'Coverage Report'
                    ])
                    publishHTML([
                        allowMissing: false,
                        alwaysLinkToLastBuild: true,
                        keepAll: true,
                        reportDir: '.',
                        reportFiles: 'test-report.html',
                        reportName: 'Test Report'
                    ])
                    
                    // Publish coverage
                    publishCoverage(
                        adapters: [coberturaAdapter('coverage.xml')],
                        sourceFileResolver: sourceFiles('STORE_LAST_BUILD')
                    )
                }
            }
        }
        
        stage('Build') {
            when {
                anyOf {
                    branch 'main'
                    branch 'develop'
                    tag pattern: "v\\d+\\.\\d+\\.\\d+", comparator: "REGEXP"
                }
            }
            steps {
                echo 'Building application...'
                sh '''
                    . ${VENV_DIR}/bin/activate
                    
                    # Build wheel
                    pip install wheel
                    python setup.py bdist_wheel
                    
                    # Build Docker image if Dockerfile exists
                    if [ -f Dockerfile ]; then
                        docker build -t oms:${BUILD_NUMBER} .
                    fi
                '''
            }
            post {
                success {
                    archiveArtifacts artifacts: 'dist/*.whl', fingerprint: true
                }
            }
        }
        
        stage('Deploy') {
            when {
                tag pattern: "v\\d+\\.\\d+\\.\\d+", comparator: "REGEXP"
            }
            steps {
                echo 'Deploying application...'
                // Add deployment steps here
            }
        }
    }
    
    post {
        always {
            cleanWs()
        }
        success {
            echo 'Pipeline completed successfully!'
            // Send success notification
        }
        failure {
            echo 'Pipeline failed!'
            // Send failure notification
        }
        unstable {
            echo 'Pipeline is unstable!'
            // Send warning notification
        }
    }
}

// Helper function to validate changed files only
def validateChangedFiles() {
    def changedFiles = sh(
        script: "git diff --name-only HEAD~1",
        returnStdout: true
    ).trim().split('\n')
    
    def pythonFiles = changedFiles.findAll { it.endsWith('.py') }
    
    if (pythonFiles) {
        sh """
            . ${VENV_DIR}/bin/activate
            python -m core.validation.ci_integration ${pythonFiles.join(' ')} \
                --format text \
                --fail-on-error
        """
    }
}