syntax = "proto3";

package embedding;

option go_package = "github.com/arrakis/oms/services/embedding/pb";
option java_package = "com.arrakis.oms.services.embedding";

// Embedding service definition
service EmbeddingService {
  // Generate embedding for text
  rpc GenerateEmbedding(EmbeddingRequest) returns (EmbeddingResponse);
  
  // Generate embeddings for multiple texts (batch)
  rpc GenerateBatchEmbeddings(BatchEmbeddingRequest) returns (BatchEmbeddingResponse);
  
  // Calculate similarity between two embeddings
  rpc CalculateSimilarity(SimilarityRequest) returns (SimilarityResponse);
  
  // Find similar documents
  rpc FindSimilar(SimilarSearchRequest) returns (SimilarSearchResponse);
  
  // Store embedding with metadata
  rpc StoreEmbedding(StoreEmbeddingRequest) returns (StoreEmbeddingResponse);
  
  // Health check
  rpc HealthCheck(HealthRequest) returns (HealthResponse);
}

// Common metadata
message RequestMeta {
  string trace_id = 1;
  string user_id = 2;
  string model_version = 3;
  map<string, string> headers = 4;
}

// Embedding request/response
message EmbeddingRequest {
  string text = 1;
  string model_name = 2;  // Optional, defaults to service config
  RequestMeta meta = 3;
}

message EmbeddingResponse {
  repeated float embedding = 1;
  int32 dimensions = 2;
  string model_used = 3;
  float processing_time_ms = 4;
}

// Batch operations
message BatchEmbeddingRequest {
  repeated string texts = 1;
  string model_name = 2;
  RequestMeta meta = 3;
}

message BatchEmbeddingResponse {
  repeated EmbeddingResult results = 1;
  string model_used = 2;
  float total_processing_time_ms = 3;
}

message EmbeddingResult {
  repeated float embedding = 1;
  bool success = 2;
  string error = 3;  // If success is false
}

// Similarity calculation
message SimilarityRequest {
  repeated float embedding1 = 1;
  repeated float embedding2 = 2;
  string metric = 3;  // "cosine", "euclidean", "dot"
  RequestMeta meta = 4;
}

message SimilarityResponse {
  float similarity = 1;
  string metric_used = 2;
}

// Similar document search
message SimilarSearchRequest {
  repeated float query_embedding = 1;
  string collection = 2;  // Collection/index to search
  int32 top_k = 3;
  float min_similarity = 4;
  map<string, string> filters = 5;  // Additional filters
  RequestMeta meta = 6;
}

message SimilarSearchResponse {
  repeated SimilarDocument documents = 1;
  int32 total_found = 2;
  float search_time_ms = 3;
}

message SimilarDocument {
  string id = 1;
  float similarity = 2;
  map<string, string> metadata = 3;
}

// Storage operations
message StoreEmbeddingRequest {
  string id = 1;
  repeated float embedding = 2;
  string collection = 3;
  map<string, string> metadata = 4;
  RequestMeta meta = 5;
}

message StoreEmbeddingResponse {
  bool success = 1;
  string message = 2;
}

// Health check
message HealthRequest {}

message HealthResponse {
  bool healthy = 1;
  string model_loaded = 2;
  int64 embeddings_cached = 3;
  map<string, string> details = 4;
}