{
  "definitely_unused": [
    "api/auth_examples.py",
    "api/gateway/graphql_proxy.py",
    "api/v1/graph_health_routes.py"
  ],
  "possibly_used": [
    {
      "file": "api/gateway/circuit_breaker.py",
      "references": [
        "./middleware/coordinator.py:        self._circuit_breaker = None",
        "./middleware/coordinator.py:    def circuit_breaker(self):",
        "./middleware/coordinator.py:        if self._circuit_breaker is None:"
      ]
    },
    {
      "file": "api/gateway/models.py",
      "references": [
        "./api/gateway/rate_limiter.py:from api.gateway.models import RateLimitPolicy, RequestContext",
        "./api/gateway/router.py:from api.gateway.models import RequestContext, ServiceRoute",
        "./middleware/rate_limiting/coordinator.py:from .models import ("
      ]
    },
    {
      "file": "api/gateway/rate_limiter.py",
      "references": [
        "./middleware/coordinator.py:        self._rate_limiter = None",
        "./middleware/coordinator.py:    def rate_limiter(self):",
        "./middleware/coordinator.py:        if self._rate_limiter is None:"
      ]
    },
    {
      "file": "api/gateway/router.py",
      "references": [
        "./core/action/routes.py:router = APIRouter(prefix=\"/action-types\", tags=[\"action-types\"])",
        "./core/action/routes.py:@router.post(\"\", response_model=ActionTypeModel)",
        "./core/action/routes.py:@router.get(\"/{action_type_id}\", response_model=ActionTypeModel)"
      ]
    },
    {
      "file": "api/graphql/config.py",
      "references": [
        "./middleware/rate_limiting/coordinator.py:    def __init__(self, default_config: Optional[RateLimitConfig] = None):",
        "./middleware/rate_limiting/coordinator.py:        self.default_config = default_config or RateLimitConfig()",
        "./middleware/rate_limiting/coordinator.py:        self._endpoint_configs: Dict[str, RateLimitConfig] = {}"
      ]
    },
    {
      "file": "api/graphql/middleware/cache.py",
      "references": [
        "./middleware/etag_analytics.py:Provides hooks for analyzing cache effectiveness and performance",
        "./middleware/etag_analytics.py:    Real-time analytics for ETag cache performance",
        "./middleware/etag_analytics.py:            \"cache_hits\": 0,"
      ]
    },
    {
      "file": "api/graphql/middleware/security.py",
      "references": [
        "./middleware/service_config.py:    SECURITY = \"security\"",
        "./middleware/service_config.py:    security_settings: Dict[str, Any] = Field(default_factory=dict)",
        "./middleware/service_config.py:                security_settings={"
      ]
    },
    {
      "file": "api/graphql/realtime_publisher.py",
      "references": [
        "./scripts/fix_imports.py:    r'from \\.realtime_publisher': r'from api.graphql.realtime_publisher',",
        "./scripts/fix_imports.py:    r'from realtime_publisher': r'from api.graphql.realtime_publisher',",
        "./core/events/unified_publisher.py:- api/graphql/realtime_publisher.py: Specialized for GraphQL subscriptions"
      ]
    },
    {
      "file": "api/graphql/subscriptions.py",
      "references": [
        "./scripts/fix_imports.py:    r'from \\.subscriptions': r'from api.graphql.subscriptions',",
        "./scripts/fix_imports.py:    r'from subscriptions': r'from api.graphql.subscriptions',",
        "./core/event_subscriber/main.py:        await self._setup_subscriptions()"
      ]
    },
    {
      "file": "api/graphql/websocket_manager.py",
      "references": [
        "./scripts/fix_imports.py:    r'from \\.websocket_manager': r'from api.graphql.websocket_manager',",
        "./scripts/fix_imports.py:    r'from websocket_manager': r'from api.graphql.websocket_manager',",
        "./scripts/fix_imports.py:    r'from \\.websocket_manager': r'from api.graphql.websocket_manager',"
      ]
    },
    {
      "file": "api/graphql/working_schema.py",
      "references": [
        "./api/graphql/__init__.py:from .working_schema import schema",
        "./api/graphql/modular_main.py:from .working_schema import schema"
      ]
    },
    {
      "file": "api/v1/audit_routes.py",
      "references": [
        "./bootstrap/app.py:        audit_routes,",
        "./bootstrap/app.py:    app.include_router(audit_routes.router, prefix=\"/api/v1\")"
      ]
    },
    {
      "file": "api/v1/batch_routes.py",
      "references": [
        "./bootstrap/app.py:        batch_routes",
        "./bootstrap/app.py:    app.include_router(batch_routes.router, prefix=\"/api/v1\")"
      ]
    },
    {
      "file": "api/v1/branch_lock_routes.py",
      "references": [
        "./bootstrap/app.py:        branch_lock_routes,",
        "./bootstrap/app.py:    app.include_router(branch_lock_routes.router, prefix=\"/api/v1\")"
      ]
    },
    {
      "file": "api/v1/document_routes.py",
      "references": [
        "./tests/integration/test_metadata_frames.py:from api.v1.document_routes import router",
        "./tests/integration/test_unfoldable_documents.py:from api.v1.document_routes import router",
        "./tests/integration/test_metadata_frames.py:from api.v1.document_routes import router"
      ]
    },
    {
      "file": "api/v1/health_routes.py",
      "references": [
        "./bootstrap/app.py:    from api.v1 import system_routes, health_routes, schema_routes",
        "./bootstrap/app.py:    app.include_router(health_routes.router)"
      ]
    },
    {
      "file": "api/v1/idempotent_routes.py",
      "references": [
        "./bootstrap/app.py:        idempotent_routes,",
        "./bootstrap/app.py:    app.include_router(idempotent_routes.router, prefix=\"/api/v1\")"
      ]
    }
  ],
  "total_checked": 244,
  "sample_size": 20
}