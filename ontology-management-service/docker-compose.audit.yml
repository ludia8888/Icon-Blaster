# Docker Compose configuration for OMS with Audit Service
# Extends the base docker-compose.yml with audit-service integration

version: '3.8'

services:
  # =============================================================================
  # AUDIT SERVICE
  # =============================================================================
  audit-service:
    build: 
      context: ../audit-service
      dockerfile: Dockerfile
    container_name: oms-audit-service
    ports:
      - "8004:8004"  # HTTP API
      - "50058:50058"  # gRPC (future)
    environment:
      - DATABASE_URL=postgresql://audit_user:audit_password@audit-postgres:5432/audit_db
      - REDIS_URL=redis://redis:6379
      - NATS_URL=nats://nats:4222
      - ENVIRONMENT=development
      - LOG_LEVEL=INFO
      - API_KEY=prod-audit-api-key-change-me
      - CORS_ORIGINS=http://localhost:3000,http://localhost:8000
      - ENABLE_TELEMETRY=true
      - JAEGER_ENDPOINT=http://jaeger:14268/api/traces
      - PROMETHEUS_METRICS=true
    depends_on:
      - audit-postgres
      - redis
      - nats
    networks:
      - oms-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8004/api/v2/events/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    volumes:
      - audit-logs:/app/logs

  # =============================================================================
  # AUDIT DATABASE (Dedicated PostgreSQL for audit service)
  # =============================================================================
  audit-postgres:
    image: postgres:15-alpine
    container_name: oms-audit-postgres
    environment:
      - POSTGRES_USER=audit_user
      - POSTGRES_PASSWORD=audit_password
      - POSTGRES_DB=audit_db
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    ports:
      - "5433:5432"  # Different port to avoid conflicts
    volumes:
      - audit-postgres-data:/var/lib/postgresql/data
      - ./audit-service/alembic/versions:/docker-entrypoint-initdb.d
    networks:
      - oms-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U audit_user -d audit_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # =============================================================================
  # MAIN OMS APPLICATION (Modified to use audit service)
  # =============================================================================
  oms-monolith:
    build: .
    container_name: oms-monolith-with-audit
    ports:
      - "8000:8000"  # Main API
      - "8004:8004"  # GraphQL WebSocket
      - "8006:8006"  # GraphQL HTTP
      - "8091:8091"  # Metrics
    environment:
      # Load audit service configuration
      - USE_AUDIT_SERVICE=true
      - AUDIT_SERVICE_URL=http://audit-service:8004
      - AUDIT_SERVICE_API_KEY=prod-audit-api-key-change-me
      - AUDIT_SERVICE_TIMEOUT=30.0
      - AUDIT_SERVICE_MAX_RETRIES=3
      
      # Other microservices (can be enabled independently)
      - USE_EMBEDDING_MS=false
      - USE_SCHEDULER_MS=false
      - USE_EVENT_GATEWAY=false
      - USE_DATA_KERNEL_GATEWAY=false
      
      # Database connections
      - TERMINUSDB_ENDPOINT=http://terminusdb:6363
      - DATABASE_URL=postgresql://oms_user:oms_password@postgres:5432/oms_db
      - REDIS_URL=redis://redis:6379
      - NATS_URL=nats://nats:4222
      
      # Authentication
      - JWT_SECRET=audit-enabled-secret-key
      - USER_SERVICE_URL=http://user-service:8000
      
      # Observability
      - ENABLE_TELEMETRY=true
      - JAEGER_ENDPOINT=http://jaeger:14268/api/traces
      - PROMETHEUS_METRICS=true
      - OTEL_SERVICE_NAME=oms-monolith-with-audit
    depends_on:
      - audit-service
      - terminusdb
      - postgres
      - redis
      - nats
    networks:
      - oms-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    volumes:
      - oms-logs:/app/logs

# =============================================================================
# VOLUMES
# =============================================================================
volumes:
  audit-postgres-data:
    driver: local
  audit-logs:
    driver: local
  oms-logs:
    driver: local

# =============================================================================
# NETWORKS
# =============================================================================
networks:
  oms-network:
    external: true