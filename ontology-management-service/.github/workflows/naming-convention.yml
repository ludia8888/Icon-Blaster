name: Naming Convention Check

on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches: [main, develop]
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write
  checks: write

jobs:
  validate-naming:
    name: Validate Naming Conventions
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for better git diff
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pydantic typing-extensions
    
    - name: Run naming convention validation
      id: validation
      run: |
        # For PRs, check only changed files
        if [ "${{ github.event_name }}" == "pull_request" ]; then
          echo "Checking changed files in PR..."
          python -m core.validation.ci_integration \
            --git-diff \
            --base-branch ${{ github.event.pull_request.base.ref }} \
            --format github \
            --fail-on-error || VALIDATION_FAILED=$?
          
          # Also generate JSON report
          python -m core.validation.ci_integration \
            --git-diff \
            --base-branch ${{ github.event.pull_request.base.ref }} \
            --format json \
            --output validation-report.json || true
        else
          # For push events, check all files
          echo "Checking all files..."
          python -m core.validation.ci_integration . \
            --format github \
            --fail-on-error || VALIDATION_FAILED=$?
          
          # Also generate JSON report
          python -m core.validation.ci_integration . \
            --format json \
            --output validation-report.json || true
        fi
        
        # Set output for later steps
        if [ -n "$VALIDATION_FAILED" ]; then
          echo "validation_failed=true" >> $GITHUB_OUTPUT
        else
          echo "validation_failed=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Generate validation summary
      if: always()
      id: summary
      run: |
        if [ -f validation-report.json ]; then
          # Parse JSON and create summary
          python - <<EOF
        import json
        import os
        
        with open('validation-report.json', 'r') as f:
            report = json.load(f)
        
        summary = report['summary']
        results = report['results']
        
        # Create markdown summary
        with open('validation-summary.md', 'w') as f:
            f.write("## üîç Naming Convention Validation Report\n\n")
            
            # Summary stats
            f.write("### Summary\n")
            f.write(f"- **Total Entities**: {summary['total_entities']}\n")
            f.write(f"- **‚úÖ Valid**: {summary['valid']}\n")
            f.write(f"- **‚ùå Invalid**: {summary['invalid']}\n\n")
            
            # Detailed issues
            if summary['invalid'] > 0:
                f.write("### Issues Found\n\n")
                
                # Group by file
                by_file = {}
                for result in results:
                    if not result.get('valid', True):
                        file_path = result['file']
                        if file_path not in by_file:
                            by_file[file_path] = []
                        by_file[file_path].append(result)
                
                for file_path, issues in by_file.items():
                    f.write(f"#### üìÑ `{file_path}`\n\n")
                    for issue in issues:
                        f.write(f"- **Line {issue['line']}**: `{issue['entity_name']}` ({issue['entity_type']})\n")
                        for detail in issue.get('issues', []):
                            f.write(f"  - {detail['message']}\n")
                            if detail.get('suggestion'):
                                f.write(f"    - üí° **Suggestion**: `{detail['suggestion']}`\n")
                        f.write("\n")
            else:
                f.write("### ‚úÖ All naming conventions passed!\n")
        
        # Set outputs
        with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
            f.write(f"total_issues={summary['invalid']}\n")
            f.write(f"has_issues={'true' if summary['invalid'] > 0 else 'false'}\n")
        EOF
        fi
    
    - name: Post PR comment
      if: github.event_name == 'pull_request' && always()
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          // Read the summary
          let comment = '## üîç Naming Convention Validation\n\n';
          
          if (fs.existsSync('validation-summary.md')) {
            const summary = fs.readFileSync('validation-summary.md', 'utf8');
            comment = summary;
          } else {
            comment += '‚úÖ No naming convention issues found!';
          }
          
          // Add action buttons
          comment += '\n\n---\n';
          comment += 'üîß **Actions**:\n';
          comment += '- Run locally: `python -m core.validation.ci_integration . --format text`\n';
          comment += '- Auto-fix suggestions: `python -m core.validation.ci_integration . --auto-fix`\n';
          
          // Find existing comment
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const botComment = comments.find(comment => 
            comment.user.type === 'Bot' && 
            comment.body.includes('üîç Naming Convention Validation')
          );
          
          if (botComment) {
            // Update existing comment
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: comment
            });
          } else {
            // Create new comment
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment
            });
          }
    
    - name: Upload validation report
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: validation-report
        path: |
          validation-report.json
          validation-summary.md
    
    - name: Create check run
      if: github.event_name == 'pull_request' && always()
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const validation_failed = '${{ steps.validation.outputs.validation_failed }}' === 'true';
          const total_issues = parseInt('${{ steps.summary.outputs.total_issues }}' || '0');
          
          let conclusion = 'success';
          let title = '‚úÖ All naming conventions passed';
          
          if (validation_failed) {
            conclusion = 'failure';
            title = `‚ùå Found ${total_issues} naming convention violations`;
          }
          
          let summary = 'No detailed summary available.';
          if (fs.existsSync('validation-summary.md')) {
            summary = fs.readFileSync('validation-summary.md', 'utf8');
          }
          
          await github.rest.checks.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            name: 'Naming Convention Check',
            head_sha: context.payload.pull_request.head.sha,
            status: 'completed',
            conclusion: conclusion,
            output: {
              title: title,
              summary: summary
            }
          });
    
    - name: Fail if validation failed
      if: steps.validation.outputs.validation_failed == 'true'
      run: |
        echo "‚ùå Naming convention validation failed!"
        exit 1

  # Additional job for auto-fix suggestions
  suggest-fixes:
    name: Generate Auto-fix Suggestions
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && failure()
    needs: validate-naming
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Generate auto-fix patch
      run: |
        # Generate auto-fix suggestions
        python -m core.validation.ci_integration \
          --git-diff \
          --base-branch ${{ github.event.pull_request.base.ref }} \
          --format json \
          --auto-fix \
          --output auto-fix-report.json || true
        
        # Create a patch file with suggestions
        python - <<EOF
        import json
        
        with open('auto-fix-report.json', 'r') as f:
            report = json.load(f)
        
        suggestions = []
        for result in report['results']:
            if not result.get('valid', True) and 'suggestions' in result:
                for old_name, new_name in result['suggestions'].items():
                    suggestions.append({
                        'file': result['file'],
                        'line': result['line'],
                        'old': old_name,
                        'new': new_name,
                        'type': result['entity_type']
                    })
        
        if suggestions:
            with open('auto-fix-suggestions.md', 'w') as f:
                f.write("## üîß Auto-fix Suggestions\n\n")
                f.write("The following changes would fix the naming convention issues:\n\n")
                f.write("```diff\n")
                for s in suggestions:
                    f.write(f"# {s['file']}:{s['line']} ({s['type']})\n")
                    f.write(f"- {s['old']}\n")
                    f.write(f"+ {s['new']}\n\n")
                f.write("```\n")
        EOF
    
    - name: Post auto-fix suggestions
      if: always()
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          if (fs.existsSync('auto-fix-suggestions.md')) {
            const suggestions = fs.readFileSync('auto-fix-suggestions.md', 'utf8');
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: suggestions
            });
          }