syntax = "proto3";

package oms.branch.v1;

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/oms/api/branch/v1";

// Branch Service - 섹션 11.4.2
service BranchService {
  // Branch operations
  rpc CreateBranch(CreateBranchRequest) returns (Branch);
  rpc GetBranch(GetBranchRequest) returns (Branch);
  rpc ListBranches(ListBranchesRequest) returns (ListBranchesResponse);
  rpc DeleteBranch(DeleteBranchRequest) returns (google.protobuf.Empty);
  
  // Diff and conflict operations
  rpc GetDiff(GetDiffRequest) returns (BranchDiff);
  rpc GetConflicts(GetConflictsRequest) returns (ConflictSet);
  
  // Proposal operations
  rpc CreateProposal(CreateProposalRequest) returns (ChangeProposal);
  rpc UpdateProposal(UpdateProposalRequest) returns (ChangeProposal);
  rpc ListProposals(ListProposalsRequest) returns (ListProposalsResponse);
  
  // Merge operations
  rpc MergeBranch(MergeBranchRequest) returns (MergeResult);
  rpc RebaseBranch(RebaseBranchRequest) returns (RebaseResult);
  
  // History operations
  rpc GetCommitHistory(GetCommitHistoryRequest) returns (CommitHistory);
  rpc FindCommonAncestor(FindCommonAncestorRequest) returns (CommitInfo);
}

// Messages
message Branch {
  string name = 1;
  string fromBranch = 2;
  string headHash = 3;
  string description = 4;
  BranchStatus status = 5;
  bool isProtected = 6;
  repeated ProtectionRule protectionRules = 7;
  string createdBy = 8;
  google.protobuf.Timestamp createdAt = 9;
  google.protobuf.Timestamp lastModified = 10;
  int32 commitsAhead = 11;
  int32 commitsBehind = 12;
  bool hasPendingChanges = 13;
}

message ChangeProposal {
  string id = 1;
  string title = 2;
  string description = 3;
  string sourceBranch = 4;
  string targetBranch = 5;
  ProposalStatus status = 6;
  string createdBy = 7;
  google.protobuf.Timestamp createdAt = 8;
  google.protobuf.Timestamp updatedAt = 9;
  repeated Approval approvals = 10;
  repeated string reviewers = 11;
  bool hasConflicts = 12;
  DiffStats diffStats = 13;
  repeated string labels = 14;
  string mergeCommitHash = 15;
}

message BranchDiff {
  string sourceBranch = 1;
  string targetBranch = 2;
  string baseCommit = 3;
  repeated ResourceDiff resourceDiffs = 4;
  DiffStats stats = 5;
  bool hasConflicts = 6;
  repeated Conflict conflicts = 7;
}

message ResourceDiff {
  string resourceId = 1;
  string resourceType = 2;
  DiffType diffType = 3;
  map<string, string> sourceDelta = 4;
  map<string, string> targetDelta = 5;
  bool isConflict = 6;
}

message DiffStats {
  int32 added = 1;
  int32 modified = 2;
  int32 deleted = 3;
  int32 conflicts = 4;
  int32 totalFiles = 5;
}

message Conflict {
  string resourceId = 1;
  ConflictType conflictType = 2;
  map<string, string> sourceVersion = 3;
  map<string, string> targetVersion = 4;
  map<string, string> baseVersion = 5;
  bool isResolved = 6;
  ResolutionStrategy resolution = 7;
  string resolvedBy = 8;
  google.protobuf.Timestamp resolvedAt = 9;
}

message ConflictSet {
  repeated Conflict conflicts = 1;
  int32 totalConflicts = 2;
  int32 resolvedConflicts = 3;
  bool canAutoMerge = 4;
}

message ResolutionStrategy {
  ResolutionChoice choice = 1;
  map<string, string> customValues = 2;
  string reason = 3;
}

message ProtectionRule {
  string id = 1;
  string type = 2;
  bool enabled = 3;
  map<string, string> parameters = 4;
}

message CommitInfo {
  string hash = 1;
  string message = 2;
  string author = 3;
  google.protobuf.Timestamp timestamp = 4;
  repeated string parents = 5;
  repeated string changedFiles = 6;
}

message CommitHistory {
  repeated CommitInfo commits = 1;
  bool hasMore = 2;
  string nextPageToken = 3;
}

message Approval {
  string userId = 1;
  string status = 2;
  string comment = 3;
  google.protobuf.Timestamp timestamp = 4;
}

message MergeResult {
  bool success = 1;
  string mergeCommitHash = 2;
  MergeStrategy strategy = 3;
  int32 conflictsResolved = 4;
  repeated string warnings = 5;
  Error error = 6;
}

message RebaseResult {
  bool success = 1;
  string newHeadHash = 2;
  int32 commitsRebased = 3;
  repeated string conflicts = 4;
  Error error = 5;
}

message Error {
  string code = 1;
  string message = 2;
  map<string, string> details = 3;
}

// Request messages
message CreateBranchRequest {
  string name = 1;
  string fromBranch = 2;
  string description = 3;
  string userId = 4;
  repeated ProtectionRule protectionRules = 5;
}

message GetBranchRequest {
  string name = 1;
}

message ListBranchesRequest {
  BranchStatus status = 1;
  string createdBy = 2;
  int32 limit = 3;
  int32 offset = 4;
}

message ListBranchesResponse {
  repeated Branch branches = 1;
  int32 totalCount = 2;
  bool hasMore = 3;
}

message DeleteBranchRequest {
  string name = 1;
  bool force = 2;
  string userId = 3;
}

message GetDiffRequest {
  string sourceBranch = 1;
  string targetBranch = 2;
  bool includeConflicts = 3;
}

message GetConflictsRequest {
  string sourceBranch = 1;
  string targetBranch = 2;
}

message CreateProposalRequest {
  string title = 1;
  string description = 2;
  string sourceBranch = 3;
  string targetBranch = 4;
  string userId = 5;
  repeated string reviewers = 6;
  repeated string labels = 7;
}

message UpdateProposalRequest {
  string id = 1;
  string title = 2;
  string description = 3;
  repeated string reviewers = 4;
  repeated string labels = 5;
  string userId = 6;
}

message ListProposalsRequest {
  string sourceBranch = 1;
  string targetBranch = 2;
  ProposalStatus status = 3;
  string createdBy = 4;
  int32 limit = 5;
  int32 offset = 6;
}

message ListProposalsResponse {
  repeated ChangeProposal proposals = 1;
  int32 totalCount = 2;
  bool hasMore = 3;
}

message MergeBranchRequest {
  string proposalId = 1;
  MergeStrategy strategy = 2;
  string title = 3;
  string description = 4;
  string userId = 5;
  bool autoDeleteSourceBranch = 6;
}

message RebaseBranchRequest {
  string sourceBranch = 1;
  string targetBranch = 2;
  string userId = 3;
}

message GetCommitHistoryRequest {
  string branch = 1;
  int32 limit = 2;
  string pageToken = 3;
  string since = 4;
  string until = 5;
}

message FindCommonAncestorRequest {
  string branch1 = 1;
  string branch2 = 2;
}

// Enums
enum ProposalStatus {
  PROPOSAL_STATUS_UNSPECIFIED = 0;
  DRAFT = 1;
  REVIEW = 2;
  APPROVED = 3;
  MERGED = 4;
  REJECTED = 5;
}

enum BranchStatus {
  BRANCH_STATUS_UNSPECIFIED = 0;
  ACTIVE = 1;
  MERGED = 2;
  ARCHIVED = 3;
}

enum DiffType {
  DIFF_TYPE_UNSPECIFIED = 0;
  ADDED = 1;
  MODIFIED = 2;
  DELETED = 3;
  CONFLICT = 4;
}

enum ConflictType {
  CONFLICT_TYPE_UNSPECIFIED = 0;
  MODIFY_MODIFY = 1;
  DELETE_MODIFY = 2;
  ADD_ADD = 3;
}

enum MergeStrategy {
  MERGE_STRATEGY_UNSPECIFIED = 0;
  MERGE = 1;
  SQUASH = 2;
  REBASE = 3;
}

enum ResolutionChoice {
  RESOLUTION_CHOICE_UNSPECIFIED = 0;
  USE_SOURCE = 1;
  USE_TARGET = 2;
  USE_BASE = 3;
  USE_CUSTOM = 4;
}