version: '3.8'

# Auth/IAM 단일화 Docker Compose 설정
# OMS Monolith + User Service 통합 환경

services:
  # =====================================
  # 메인 애플리케이션 서비스
  # =====================================
  
  oms-monolith:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      # User Service 통합
      - USER_SERVICE_URL=http://user-service:8000
      - USE_UNIFIED_AUTH=true
      - DISABLE_LEGACY_AUTH=true
      
      # JWT/JWKS 설정
      - USE_JWKS=true
      - JWT_VALIDATION_MODE=jwks
      - JWT_ISSUER=user-service
      - JWT_AUDIENCE=oms
      - JWT_LOCAL_VALIDATION=false
      
      # Database
      - DATABASE_URL=postgresql+asyncpg://oms_user:oms_password@postgres:5432/oms_db
      
      # Redis
      - REDIS_URL=redis://redis:6379
      - SESSION_REDIS_PREFIX=oms-session
      
      # 모니터링
      - ENABLE_AUTH_METRICS=true
      - COLLECT_USER_SERVICE_METRICS=true
      
      # 보안
      - USER_SERVICE_USE_TLS=false  # 내부 통신은 HTTP
      - USER_SERVICE_VERIFY_SSL=false
      
      # 마이그레이션 플래그
      - AUTH_MIGRATION_COMPLETED=true
      - AUTH_UNIFICATION_DATE=2025-07-06
    ports:
      - "8000:8000"
    depends_on:
      - postgres
      - redis
      - user-service
    networks:
      - oms-network
    volumes:
      - ./logs:/app/logs
      - ./config:/app/config
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # =====================================
  # User Service (인증 전담)
  # =====================================
  
  user-service:
    build:
      context: ../user-service
      dockerfile: Dockerfile
    environment:
      # Database (독립적인 사용자 DB)
      - DATABASE_URL=postgresql+asyncpg://user_service:user_password@user-db:5432/user_service_db
      
      # JWT 설정 (OMS와 공유)
      - JWT_SECRET=${JWT_SECRET}
      - JWT_ALGORITHM=HS256
      - JWT_ISSUER=user-service
      - JWT_AUDIENCE=oms
      - ACCESS_TOKEN_EXPIRE_MINUTES=30
      - REFRESH_TOKEN_EXPIRE_DAYS=7
      
      # 비밀번호 정책
      - PASSWORD_MIN_LENGTH=8
      - PASSWORD_REQUIRE_UPPERCASE=true
      - PASSWORD_REQUIRE_LOWERCASE=true
      - PASSWORD_REQUIRE_DIGITS=true
      - PASSWORD_REQUIRE_SPECIAL=true
      - PASSWORD_HISTORY_COUNT=12
      
      # 보안 설정
      - MAX_FAILED_LOGIN_ATTEMPTS=5
      - LOCKOUT_DURATION_MINUTES=30
      - MAX_CONCURRENT_SESSIONS=5
      
      # MFA 설정
      - MFA_ISSUER=OMS Company
      - MFA_BACKUP_CODES_COUNT=10
      
      # Redis (세션 관리)
      - REDIS_URL=redis://redis:6379
      - REDIS_PREFIX=user-service
      
      # CORS (OMS 호출 허용)
      - CORS_ORIGINS=["http://oms-monolith:8000", "http://localhost:8000"]
      - CORS_ALLOW_ALL_ORIGINS=false
      
      # 로깅
      - LOG_LEVEL=INFO
      - LOG_FORMAT=json
      
      # Rate Limiting
      - RATE_LIMIT_ENABLED=true
      - RATE_LIMIT_PER_MINUTE=60
    ports:
      - "8001:8000"
    depends_on:
      - user-db
      - redis
    networks:
      - oms-network
    volumes:
      - ../user-service/logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # =====================================
  # 데이터베이스 서비스
  # =====================================
  
  # OMS 메인 데이터베이스
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_USER=oms_user
      - POSTGRES_PASSWORD=oms_password
      - POSTGRES_DB=oms_db
    ports:
      - "5432:5432"
    networks:
      - oms-network
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./migrations/sql:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U oms_user -d oms_db"]
      interval: 30s
      timeout: 5s
      retries: 3

  # User Service 전용 데이터베이스
  user-db:
    image: postgres:15-alpine
    environment:
      - POSTGRES_USER=user_service
      - POSTGRES_PASSWORD=user_password
      - POSTGRES_DB=user_service_db
    ports:
      - "5433:5432"
    networks:
      - oms-network
    volumes:
      - user_db_data:/var/lib/postgresql/data
      - ../user-service/migrations:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user_service -d user_service_db"]
      interval: 30s
      timeout: 5s
      retries: 3

  # =====================================
  # 캐시 및 세션 스토어
  # =====================================
  
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    networks:
      - oms-network
    volumes:
      - redis_data:/data
      - ./config/redis.conf:/etc/redis/redis.conf
    command: redis-server /etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3

  # =====================================
  # 모니터링 및 관찰성
  # =====================================
  
  # Prometheus (메트릭 수집)
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    networks:
      - oms-network
    volumes:
      - ./monitoring/prometheus/prometheus-auth.yml:/etc/prometheus/prometheus.yml
      - ./monitoring/prometheus/rules:/etc/prometheus/rules
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Grafana (대시보드)
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    networks:
      - oms-network
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - grafana_data:/var/lib/grafana
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Jaeger (분산 추적)
  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      - "16686:16686"
      - "14268:14268"
    networks:
      - oms-network
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    volumes:
      - jaeger_data:/tmp
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:14269/"]
      interval: 30s
      timeout: 5s
      retries: 3

# =====================================
# 네트워크 및 볼륨
# =====================================

networks:
  oms-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  # 데이터베이스 볼륨
  postgres_data:
    driver: local
  user_db_data:
    driver: local
  
  # 캐시 볼륨
  redis_data:
    driver: local
  
  # 모니터링 볼륨
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  jaeger_data:
    driver: local

# =====================================
# 헬스체크 설정
# =====================================

# 모든 서비스가 정상 상태가 될 때까지 대기
# docker-compose up --wait