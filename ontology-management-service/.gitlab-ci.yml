# GitLab CI/CD Pipeline for OMS
# Includes naming convention validation

stages:
  - validate
  - test
  - build
  - deploy

variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  PYTHON_VERSION: "3.11"

# Cache dependencies
cache:
  paths:
    - .cache/pip
    - venv/

# Naming Convention Validation Job
naming-convention:
  stage: validate
  image: python:${PYTHON_VERSION}
  before_script:
    - pip install --upgrade pip
    - pip install -r requirements.txt
  script:
    # Validate all Python files
    - python -m core.validation.ci_integration . --format text --fail-on-error --verbose
    
    # Also generate JSON report for artifacts
    - python -m core.validation.ci_integration . --format json --output naming-report.json
    
    # Check only changed files in merge requests
    - |
      if [ -n "$CI_MERGE_REQUEST_IID" ]; then
        echo "Validating changed files in MR..."
        python -m core.validation.ci_integration --git-diff --base-branch $CI_MERGE_REQUEST_TARGET_BRANCH_NAME --format text --fail-on-error
      fi
  artifacts:
    reports:
      junit: naming-report.xml
    paths:
      - naming-report.json
    expire_in: 1 week
  rules:
    # Run on merge requests
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    # Run on main/develop branches
    - if: '$CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH == "develop"'
    # Run on tags
    - if: '$CI_COMMIT_TAG'

# Type checking job
type-check:
  stage: validate
  image: python:${PYTHON_VERSION}
  before_script:
    - pip install --upgrade pip
    - pip install -r requirements.txt
    - pip install mypy types-all
  script:
    - mypy core/ --ignore-missing-imports
  allow_failure: true

# Linting job
lint:
  stage: validate
  image: python:${PYTHON_VERSION}
  before_script:
    - pip install --upgrade pip
    - pip install flake8 black isort
  script:
    - black --check core/
    - isort --check-only core/
    - flake8 core/ --max-line-length=100 --ignore=E203,W503

# Security scan
security-scan:
  stage: validate
  image: python:${PYTHON_VERSION}
  before_script:
    - pip install bandit safety
  script:
    - bandit -r core/ -f json -o bandit-report.json
    - safety check --json --output safety-report.json
  artifacts:
    paths:
      - bandit-report.json
      - safety-report.json
    expire_in: 1 week
  allow_failure: true

# Unit tests
test:unit:
  stage: test
  image: python:${PYTHON_VERSION}
  before_script:
    - pip install --upgrade pip
    - pip install -r requirements.txt
    - pip install pytest pytest-cov
  script:
    - pytest core/validation/tests/ -v --cov=core/validation --cov-report=xml --cov-report=html
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
    paths:
      - htmlcov/
    expire_in: 1 week
  coverage: '/TOTAL.*\s+(\d+%)$/'

# Integration tests
test:integration:
  stage: test
  image: python:${PYTHON_VERSION}
  services:
    - postgres:14
    - redis:7
  variables:
    POSTGRES_DB: oms_test
    POSTGRES_USER: oms
    POSTGRES_PASSWORD: test123
    DATABASE_URL: "postgresql://oms:test123@postgres:5432/oms_test"
    REDIS_URL: "redis://redis:6379/0"
  before_script:
    - pip install --upgrade pip
    - pip install -r requirements.txt
  script:
    - python -m pytest tests/integration/ -v
  allow_failure: true

# Build Docker image
build:docker:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
  script:
    - docker build -t $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA .
    - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE:latest
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    - docker push $CI_REGISTRY_IMAGE:latest
  only:
    - main
    - develop
    - tags

# Deploy to staging
deploy:staging:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache curl
  script:
    - echo "Deploying to staging..."
    # Add your deployment script here
  environment:
    name: staging
    url: https://staging.oms.example.com
  only:
    - develop

# Deploy to production
deploy:production:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache curl
  script:
    - echo "Deploying to production..."
    # Add your deployment script here
  environment:
    name: production
    url: https://oms.example.com
  only:
    - tags
  when: manual

# Generate documentation
pages:
  stage: deploy
  image: python:${PYTHON_VERSION}
  before_script:
    - pip install sphinx sphinx-rtd-theme
  script:
    - cd docs && make html
    - mv _build/html ../public
  artifacts:
    paths:
      - public
  only:
    - main