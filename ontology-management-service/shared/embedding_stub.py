"""
gRPC stub for Embedding Service
"""
import grpc
import logging
import numpy as np
from typing import List, Dict, Any, Optional, Union

from shared.grpc_interceptors import create_instrumented_channel

# These will be generated by protoc
try:
    from services.embedding_service.proto import embedding_service_pb2 as pb2
    from services.embedding_service.proto import embedding_service_pb2_grpc as pb2_grpc
except ImportError:
    # Fallback for when proto stubs aren't generated yet
    pb2 = None
    pb2_grpc = None

logger = logging.getLogger(__name__)


class EmbeddingStub:
    """gRPC client stub for Embedding Service"""
    
    def __init__(self, target: str = "embedding-service:50055"):
        if not pb2 or not pb2_grpc:
            raise ImportError(
                "Proto stubs not generated for embedding service. "
                "Run 'make proto' to generate them."
            )
        
        self.target = target
        self.channel = create_instrumented_channel(target)
        self.stub = pb2_grpc.EmbeddingServiceStub(self.channel)
        logger.info(f"EmbeddingStub initialized for {target}")
    
    async def initialize(self):
        """Initialize the stub (compatibility method)"""
        # Check health
        try:
            request = pb2.HealthRequest()
            response = await self.stub.HealthCheck(request)
            if response.healthy:
                logger.info("Embedding service is healthy")
            else:
                logger.warning("Embedding service unhealthy")
        except Exception as e:
            logger.error(f"Failed to check embedding service health: {e}")
    
    async def generate_embedding(
        self,
        text: str,
        metadata: Optional[Dict[str, Any]] = None
    ) -> List[float]:
        """Generate embedding for text"""
        try:
            # Build request metadata
            meta = pb2.RequestMeta()
            if metadata:
                if "trace_id" in metadata:
                    meta.trace_id = metadata["trace_id"]
                if "user_id" in metadata:
                    meta.user_id = metadata["user_id"]
            
            request = pb2.EmbeddingRequest(
                text=text,
                meta=meta
            )
            
            response = await self.stub.GenerateEmbedding(request)
            return list(response.embedding)
            
        except grpc.RpcError as e:
            logger.error(f"gRPC error generating embedding: {e}")
            raise
    
    async def generate_batch_embeddings(
        self,
        texts: List[str],
        metadata: Optional[Dict[str, Any]] = None
    ) -> List[List[float]]:
        """Generate embeddings for multiple texts"""
        try:
            # Build request metadata
            meta = pb2.RequestMeta()
            if metadata:
                if "trace_id" in metadata:
                    meta.trace_id = metadata["trace_id"]
                if "user_id" in metadata:
                    meta.user_id = metadata["user_id"]
            
            request = pb2.BatchEmbeddingRequest(
                texts=texts,
                meta=meta
            )
            
            response = await self.stub.GenerateBatchEmbeddings(request)
            
            embeddings = []
            for result in response.results:
                if result.success:
                    embeddings.append(list(result.embedding))
                else:
                    logger.warning(f"Failed to generate embedding: {result.error}")
                    embeddings.append([])
            
            return embeddings
            
        except grpc.RpcError as e:
            logger.error(f"gRPC error generating batch embeddings: {e}")
            raise
    
    async def calculate_similarity(
        self,
        embedding1: Union[List[float], np.ndarray],
        embedding2: Union[List[float], np.ndarray],
        metric: str = "cosine"
    ) -> float:
        """Calculate similarity between embeddings"""
        try:
            # Convert numpy arrays to lists
            if isinstance(embedding1, np.ndarray):
                embedding1 = embedding1.tolist()
            if isinstance(embedding2, np.ndarray):
                embedding2 = embedding2.tolist()
            
            request = pb2.SimilarityRequest(
                embedding1=embedding1,
                embedding2=embedding2,
                metric=metric
            )
            
            response = await self.stub.CalculateSimilarity(request)
            return response.similarity
            
        except grpc.RpcError as e:
            logger.error(f"gRPC error calculating similarity: {e}")
            raise
    
    async def find_similar(
        self,
        query_embedding: Union[List[float], np.ndarray],
        collection: str = "default",
        top_k: int = 10,
        min_similarity: float = 0.0,
        filters: Optional[Dict[str, Any]] = None
    ) -> List[Dict[str, Any]]:
        """Find similar documents"""
        try:
            # Convert numpy array to list
            if isinstance(query_embedding, np.ndarray):
                query_embedding = query_embedding.tolist()
            
            request = pb2.SimilarSearchRequest(
                query_embedding=query_embedding,
                collection=collection,
                top_k=top_k,
                min_similarity=min_similarity,
                filters=filters or {}
            )
            
            response = await self.stub.FindSimilar(request)
            
            results = []
            for doc in response.documents:
                results.append({
                    "id": doc.id,
                    "similarity": doc.similarity,
                    "metadata": dict(doc.metadata)
                })
            
            return results
            
        except grpc.RpcError as e:
            logger.error(f"gRPC error finding similar documents: {e}")
            raise
    
    async def store_embedding(
        self,
        id: str,
        embedding: Union[List[float], np.ndarray],
        collection: str = "default",
        metadata: Optional[Dict[str, Any]] = None
    ) -> bool:
        """Store embedding with metadata"""
        try:
            # Convert numpy array to list
            if isinstance(embedding, np.ndarray):
                embedding = embedding.tolist()
            
            request = pb2.StoreEmbeddingRequest(
                id=id,
                embedding=embedding,
                collection=collection,
                metadata=metadata or {}
            )
            
            response = await self.stub.StoreEmbedding(request)
            return response.success
            
        except grpc.RpcError as e:
            logger.error(f"gRPC error storing embedding: {e}")
            raise
    
    async def close(self):
        """Close the gRPC channel"""
        await self.channel.close()


def get_embedding_stub(target: str = "embedding-service:50055") -> EmbeddingStub:
    """Get embedding service stub instance"""
    return EmbeddingStub(target)