[tool.poetry]
name = "oms-monolith"
version = "3.0.0"
description = "Ontology Management System - Ultimate Monolith"
authors = ["OMS Team"]
packages = [{ include = "*" }]

[tool.poetry.dependencies]
python = ">=3.10"
fastapi = "^0.104.0"
uvicorn = {extras = ["standard"], version = "^0.24.0"}
redis = "^5.0.0"
prometheus-client = "^0.19.0"
strawberry-graphql = {extras = ["fastapi"], version = "^0.209.0"}
pydantic = "^2.4.0"
python-jose = {extras = ["cryptography"], version = "^3.3.0"}
python-multipart = "^0.0.6"
httpx = "^0.25.0"
nats-py = "^2.6.0"
asyncpg = "^0.29.0"
opentelemetry-api = "^1.21.0"
opentelemetry-sdk = "^1.21.0"
opentelemetry-instrumentation-fastapi = "^0.42b0"
opentelemetry-exporter-prometheus = "^0.42b0"

[tool.poetry.dev-dependencies]
import-linter = "^1.12.0"
black = "^23.0.0"
isort = "^5.12.0"
mypy = "^1.7.0"
ruff = "^0.1.0"

[build-system]
requires = ["poetry-core>=1.0.0", "setuptools>=61.0"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 100
target-version = ['py39']

[tool.isort]
profile = "black"
line_length = 100

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_optional = true
disallow_any_generics = true
disallow_untyped_calls = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_unused_imports = true
show_error_codes = true

# Per-module settings
[[tool.mypy.overrides]]
module = [
    "tests.*",
    "migrations.*",
    "_archive_tests.*"
]
ignore_errors = true

[[tool.mypy.overrides]]
module = [
    "httpx.*",
    "fastapi.*",
    "uvicorn.*",
    "pydantic.*",
    "strawberry.*",
    "nats.*",
    "asyncpg.*",
    "pytest.*"
]
ignore_missing_imports = true

[tool.ruff]
line-length = 100
target-version = "py39"

select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "Q",   # flake8-quotes
    "SIM", # flake8-simplify
    "ICN", # flake8-import-conventions
    "PIE", # flake8-pie
    "T20", # flake8-print
    "PYI", # flake8-pyi
    "PT",  # flake8-pytest-style
    "RET", # flake8-return
    "SLF", # flake8-self
    "ARG", # flake8-unused-arguments
    "PTH", # flake8-use-pathlib
    "ERA", # eradicate
    "PGH", # pygrep-hooks
    "PL",  # pylint
    "TRY", # tryceratops
    "FURB", # refurb
    "LOG",  # flake8-logging
    "RUF",  # ruff-specific
]

ignore = [
    "E501",   # line too long (handled by formatter)
    "B008",   # do not perform function calls in argument defaults
    "PLR0913", # too many arguments
    "PLR0912", # too many branches
    "PLR0915", # too many statements
    "PLR2004", # magic value used in comparison
    "RET504",  # unnecessary variable assignment
    "T201",    # print statements (allowed in scripts)
    "T203",    # pprint statements
]

exclude = [
    ".git",
    "__pycache__",
    "*.pyc",
    ".venv",
    "_archive_tests",
    "migrations",
]

[tool.ruff.per-file-ignores]
"tests/**/*.py" = [
    "S101",   # use of assert
    "ARG",    # unused function args
    "PLR2004", # magic value
]
"scripts/**/*.py" = [
    "T201",   # print statements allowed in scripts
]

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "strict"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "e2e: marks tests as end-to-end tests",
    "real: marks tests that use real services (no mocks)",
    "etag: marks tests as ETag caching tests (deselect with '-m \"not etag\"')",
    "unit: marks tests as unit tests",
    "benchmark: marks tests as performance benchmarks",
]

