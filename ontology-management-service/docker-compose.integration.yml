version: '3.8'

# Integration test environment for MSA architecture validation
# This configuration creates a production-like environment with real services

services:
  # TerminusDB - Graph database for OMS
  terminusdb:
    image: terminusdb/terminusdb-server:v11.0.0
    container_name: oms-test-terminusdb
    environment:
      - TERMINUSDB_SERVER_NAME=oms-terminus
      - TERMINUSDB_ADMIN_PASS=admin123
      - TERMINUSDB_LRU_CACHE_SIZE=500  # 500MB cache as per config
    ports:
      - "16363:6363"
    volumes:
      - test-terminusdb-data:/app/terminusdb/storage
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6363/api/info"]
      interval: 5s
      timeout: 3s
      retries: 10
      start_period: 20s
    networks:
      - oms-test-network

  # NATS with JetStream for event streaming
  nats:
    image: nats:2.10-alpine
    container_name: oms-test-nats
    command: 
      - "-js"  # Enable JetStream
      - "-sd"  # Store directory
      - "/data"
      - "-m"   # HTTP monitoring
      - "8222"
    ports:
      - "14222:4222"  # Client connections
      - "18222:8222"  # HTTP monitoring
    volumes:
      - test-nats-data:/data
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8222/healthz"]
      interval: 5s
      timeout: 3s
      retries: 10
      start_period: 10s
    networks:
      - oms-test-network

  # PostgreSQL for audit service
  postgres-audit:
    image: postgres:16-alpine
    container_name: oms-test-postgres-audit
    environment:
      - POSTGRES_DB=audit_db
      - POSTGRES_USER=audit_user
      - POSTGRES_PASSWORD=audit_pass
    ports:
      - "15432:5432"
    volumes:
      - test-postgres-audit-data:/var/lib/postgresql/data
      - ./migrations/audit_schema.sql:/docker-entrypoint-initdb.d/01-schema.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U audit_user -d audit_db"]
      interval: 5s
      timeout: 3s
      retries: 10
      start_period: 20s
    networks:
      - oms-test-network

  # PostgreSQL for user service
  postgres-user:
    image: postgres:16-alpine
    container_name: oms-test-postgres-user
    environment:
      - POSTGRES_DB=user_db
      - POSTGRES_USER=user_user
      - POSTGRES_PASSWORD=user_pass
    ports:
      - "15433:5432"
    volumes:
      - test-postgres-user-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user_user -d user_db"]
      interval: 5s
      timeout: 3s
      retries: 10
      start_period: 20s
    networks:
      - oms-test-network

  # Redis for caching and distributed locks
  redis:
    image: redis:7-alpine
    container_name: oms-test-redis
    command: redis-server --requirepass redis123
    ports:
      - "16379:6379"
    volumes:
      - test-redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "redis123", "ping"]
      interval: 5s
      timeout: 3s
      retries: 10
      start_period: 10s
    networks:
      - oms-test-network

  # OMS Monolith Service
  oms:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: oms-test-service
    command: ["python", "-m", "uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8002", "--workers", "1"]
    environment:
      # Database connections
      - TERMINUSDB_SERVER=http://terminusdb:6363
      - TERMINUSDB_USER=admin
      - TERMINUSDB_PASSWORD=admin123
      - TERMINUSDB_LRU_CACHE_SIZE=500
      
      # NATS configuration
      - NATS_URL=nats://nats:4222
      - NATS_STREAM_NAME=audit-events
      
      # Redis configuration
      - REDIS_URL=redis://:redis123@redis:6379
      
      # PostgreSQL for outbox (if needed)
      - OUTBOX_DB_URL=postgresql://audit_user:audit_pass@postgres-audit:5432/audit_db
      
      # Service configuration
      - SERVICE_NAME=oms
      - LOG_LEVEL=DEBUG
      - JWT_SECRET=test-jwt-secret-key
      
      # User Service integration
      - USER_SERVICE_URL=http://user-service:8000
      - USE_MSA_AUTH=true
      
      # Feature flags
      - ENABLE_AUDIT=true
      - ENABLE_CACHING=true
      - ENABLE_OUTBOX=true
      
      # Test mode
      - TEST_MODE=integration
    ports:
      - "18000:8002"
    depends_on:
      terminusdb:
        condition: service_healthy
      nats:
        condition: service_healthy
      redis:
        condition: service_healthy
      postgres-audit:
        condition: service_healthy
      user-service:
        condition: service_healthy
    volumes:
      - ./:/app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 5s
      timeout: 3s
      retries: 20
      start_period: 40s
    networks:
      - oms-test-network

  # Audit Service
  audit-service:
    build:
      context: ../audit-service
      dockerfile: Dockerfile
    container_name: oms-test-audit-service
    environment:
      # Database connection
      - DATABASE_URL=postgresql://audit_user:audit_pass@postgres-audit:5432/audit_db
      
      # NATS configuration
      - NATS_URL=nats://nats:4222
      - NATS_STREAM_NAME=audit-events
      - NATS_CONSUMER_NAME=audit-consumer
      - NATS_DURABLE_NAME=audit-durable
      
      # Service configuration
      - SERVICE_NAME=audit-service
      - LOG_LEVEL=DEBUG
      
      # Test mode
      - TEST_MODE=integration
    ports:
      - "18001:8001"
    depends_on:
      postgres-audit:
        condition: service_healthy
      nats:
        condition: service_healthy
    volumes:
      - ../audit-service:/app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 5s
      timeout: 3s
      retries: 20
      start_period: 40s
    networks:
      - oms-test-network

  # User Service
  user-service:
    build:
      context: ../user-service
      dockerfile: Dockerfile
    container_name: oms-test-user-service
    environment:
      # Database connection
      - DATABASE_URL=postgresql+asyncpg://user_user:user_pass@postgres-user:5432/user_db
      
      # Redis configuration
      - REDIS_URL=redis://:redis123@redis:6379
      
      # NATS configuration (for event publishing)
      - NATS_URL=nats://nats:4222
      - NATS_STREAM_NAME=audit-events
      
      # JWT configuration
      - JWT_SECRET=test-jwt-secret-key
      - JWT_ALGORITHM=HS256
      - JWT_EXPIRATION_MINUTES=30
      
      # Service configuration
      - SERVICE_NAME=user-service
      - LOG_LEVEL=DEBUG
      
      # Test mode
      - TEST_MODE=integration
    ports:
      - "18002:8001"
    depends_on:
      postgres-user:
        condition: service_healthy
      redis:
        condition: service_healthy
      nats:
        condition: service_healthy
    volumes:
      - ../user-service:/app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/api/v1/health"]
      interval: 5s
      timeout: 3s
      retries: 20
      start_period: 40s
    networks:
      - oms-test-network

  # Wait for all services to be ready
  wait-for-services:
    image: busybox:latest
    container_name: oms-test-wait
    depends_on:
      oms:
        condition: service_healthy
      audit-service:
        condition: service_healthy
      user-service:
        condition: service_healthy
    command: echo "All services are ready!"
    networks:
      - oms-test-network

networks:
  oms-test-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.25.0.0/16

volumes:
  test-terminusdb-data:
  test-nats-data:
  test-postgres-audit-data:
  test-postgres-user-data:
  test-redis-data: